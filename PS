import * as fs from "fs";
import type { Trophy, TitleTrophiesResponse, UserTrophiesEarnedForTitleResponse } from "psn-api";
import {
  exchangeCodeForAccessToken,
  exchangeNpssoForCode,
  getTitleTrophies,
  getUserTitles,
  getUserTrophiesEarnedForTitle,
  makeUniversalSearch,
  TrophyRarity
} from "psn-api";

async function main() {
  try {
    // Authenticate and become authorized with PSN.
    const myNpsso = "CgPN8eHIYeO1JavZedT9LcKHCqGsOqeA1eCyle3LAnQfJ2E5OSIPUVzaVpbk1oxx";

    // Exchange NPSSO for access code
    console.log("Exchanging NPSSO for access code...");
    const accessCode = await exchangeNpssoForCode(myNpsso);
    console.log("Exchanging access code for access token...");
    const authorization = await exchangeCodeForAccessToken(accessCode);

    // Get the user's account ID from username
    const username = "KingOfFlubb";  // Replace with the target username
    console.log(`Fetching account ID for username: ${username}...`);
    const targetAccountId = await getExactMatchAccountId(authorization, username);
    console.log(`Fetched account ID: ${targetAccountId}`);

    // Get the user's list of titles (games).
    console.log("Fetching user titles...");
    const trophyTitles = await fetchAllTitles(authorization, targetAccountId);
    console.log("User titles fetched successfully. Total titles:", trophyTitles.length);
    // Prepare the file for writing
    const filePath = `./${username}.json`;
    fs.writeFileSync(filePath, "");  // Clear the file if it already exists
// Process titles in parallel
const titlePromises = trophyTitles.map(async (title, index) => {
    console.log(`Processing title: ${title.trophyTitleName} (${title.npCommunicationId})`);
    try {
      // Get all trophies for the title
      const titleTrophies = await fetchAllTrophies(authorization, title.npCommunicationId, title.trophyTitlePlatform);
  
      // Get all earned trophies for the title
      const earnedTrophies = await fetchAllEarnedTrophies(authorization, targetAccountId, title.npCommunicationId, title.trophyTitlePlatform);
  
      // Merge the two trophy lists
      const mergedTrophies = mergeTrophyLists(titleTrophies, earnedTrophies);
  
      // Return an object containing the title index and merged trophies
      return { index, mergedTrophies };
    } catch (error) {
      if (error instanceof Error) {
        console.error(`Error processing trophies for ${title.trophyTitleName}:`, error.message);
      } else {
        console.error(`Error processing trophies for ${title.trophyTitleName}:`, error);
      }
      // Return an object containing the title index and an empty array if there's an error
      return { index, mergedTrophies: [] };
    }
  });
  
  // Wait for all title processing to complete
  const titleResults = await Promise.all(titlePromises);
  
  // Sort the results by the original index
  titleResults.sort((a, b) => a.index - b.index);
  
  // Write the achievements of each title to the user's JSON file
  titleResults.forEach(({ index, mergedTrophies }) => {
    const title = trophyTitles[index];
    appendToGamesJSON(username, title.trophyTitleName, title.trophyTitlePlatform, mergedTrophies);
  });
  

    console.log("Script completed successfully.");
  } catch (error) {
    if (error instanceof Error){
      console.error("An error occurred during the script execution:", error.message);
    } else {
      console.error("An error occurred during the script execution:", error);
    }
    
  }
}

const getExactMatchAccountId = async (authorization: any, username: string): Promise<string> => {
  const allAccountsSearchResults = await makeUniversalSearch(
    authorization,
    username,
    "SocialAllAccounts"
  );

  const exactMatchAccount = allAccountsSearchResults.domainResponses[0].results.find(
    (result) => result.socialMetadata.onlineId === username
  );

  if (!exactMatchAccount) {
    throw new Error(`No exact match found for username: ${username}`);
  }

  return exactMatchAccount.socialMetadata.accountId;
};

const fetchAllTitles = async (authorization: any, accountId: string): Promise<any[]> => {
  let titles: any[] = [];
  let offset = 0;
  const limit = 100; // Number of titles to fetch per request

  while (true) {
    const response = await getUserTitles(authorization, accountId, { limit, offset });
    titles = titles.concat(response.trophyTitles);

    if (response.trophyTitles.length < limit) break; // Exit loop if fewer titles than limit were returned
    offset += limit; // Update offset for next request
  }

  return titles;
};

const fetchAllTrophies = async (authorization: any, npCommunicationId: string, platform: string): Promise<Trophy[]> => {
  let trophies: Trophy[] = [];
  let offset = 0;
  const limit = 100; // Number of trophies to fetch per request

  while (true) {
    const response: TitleTrophiesResponse = await getTitleTrophies(
      authorization,
      npCommunicationId,
      "all",
      {
        limit,
        offset,
        npServiceName: platform !== "PS5" ? "trophy" : undefined
      }
    );

    trophies = trophies.concat(response.trophies);
    if (response.trophies.length < limit) break; // Exit loop if fewer trophies than limit were returned

    offset += limit; // Update offset for next request
  }

  return trophies;
};

const fetchAllEarnedTrophies = async (authorization: any, accountId: string, npCommunicationId: string, platform: string): Promise<Trophy[]> => {
  let trophies: Trophy[] = [];
  let offset = 0;
  const limit = 100; // Number of trophies to fetch per request

  while (true) {
    const response: UserTrophiesEarnedForTitleResponse = await getUserTrophiesEarnedForTitle(
      authorization,
      accountId,
      npCommunicationId,
      "all",
      {
        limit,
        offset,
        npServiceName: platform !== "PS5" ? "trophy" : undefined
      }
    );

    trophies = trophies.concat(response.trophies);
    if (response.trophies.length < limit) break; // Exit loop if fewer trophies than limit were returned

    offset += limit; // Update offset for next request
  }

  return trophies;
};

const appendToGamesJSON = (
  username: string,
  gameName: string,
  platform: string,
  trophyList: any[]
) => {
  const gameData = {
    gameName,
    platform,
    trophyList
  };

  const filePath = `./${username}.json`;

  try {
    fs.appendFileSync(filePath, JSON.stringify(gameData) + "\n");
    console.log(`Data for ${gameName} appended to ${username}.json successfully.`);
  } catch (error) {
    if (error instanceof Error){
      console.error(`Error appending data for ${gameName} to ${username}.json:`, error.message);
    }else {
      console.error(`Error appending data for ${gameName} to ${username}.json:`, error);
    }
  
  }
};

const mergeTrophyLists = (
  titleTrophies: Trophy[],
  earnedTrophies: Trophy[]
) => {
  const mergedTrophies: any[] = [];

  for (const earnedTrophy of earnedTrophies) {
    const foundTitleTrophy = titleTrophies.find(
      (t) => t.trophyId === earnedTrophy.trophyId
    );

    if (foundTitleTrophy) {
      mergedTrophies.push(
        normalizeTrophy({ ...earnedTrophy, ...foundTitleTrophy })
      );
    } else {
      // If the trophy is not found in the title trophies, log it for debugging
      console.warn(`Trophy with ID ${earnedTrophy.trophyId} not found in title trophies.`);
    }
  }

  return mergedTrophies;
};

const normalizeTrophy = (trophy: Trophy) => {
  return {
    isEarned: trophy.earned ?? false,
    earnedOn: trophy.earned ? trophy.earnedDateTime : "unearned",
    type: trophy.trophyType,
    rarity: rarityMap[trophy.trophyRare ?? 0],
    earnedRate: Number(trophy.trophyEarnedRate),
    trophyName: trophy.trophyName,
    groupId: trophy.trophyGroupId
  };
};

const rarityMap: Record<TrophyRarity, string> = {
  [TrophyRarity.VeryRare]: "Very Rare",
  [TrophyRarity.UltraRare]: "Ultra Rare",
  [TrophyRarity.Rare]: "Rare",
  [TrophyRarity.Common]: "Common"
};

main();


